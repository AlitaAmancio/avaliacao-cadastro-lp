/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import dao.ClienteDAO;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFormattedTextField;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.JFormattedTextField.AbstractFormatterFactory;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;
import model.Cliente;
import model.TelaCadastroModelo;

public class TelaCliente extends javax.swing.JFrame {

    // Formata a data do padrão US para o padrão BR
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    // Máscara que determina o padrão que os dados serão inseridos
    MaskFormatter mascaraDataNascimento;
    MaskFormatter mascaraAltura;

    /**
     * Creates new form TelaCliente
     */
    public TelaCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBuscar = new javax.swing.JPanel();
        caixaBuscarCliente = new javax.swing.JTextField();
        jLabelBuscarCliente = new javax.swing.JLabel();
        botaoBuscar = new javax.swing.JButton();
        cabecalho = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonDeslogar = new javax.swing.JButton();
        jButtonVisaoGeral = new javax.swing.JButton();
        botaoNovoCliente = new javax.swing.JButton();
        jPanelClienteEncontrado = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClienteEncontrado = new javax.swing.JTable();
        jPanelImc1 = new javax.swing.JPanel();
        jLabelImcInfo = new javax.swing.JLabel();
        jButtonBaixarInfo = new javax.swing.JButton();
        jToggleButtonAtualizarDados = new javax.swing.JToggleButton();
        jButtonDeletarCadastro = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jToggleButtonCalcularImc1 = new javax.swing.JToggleButton();
        jCheckBoxConfirmarDelete = new javax.swing.JCheckBox();
        jLabelCadastroDeletado = new javax.swing.JLabel();
        jPanelAtualizarDados = new javax.swing.JPanel();
        jTextFieldNomeAtualizado = new javax.swing.JTextField();
        jLabelAlturaAtualizada = new javax.swing.JLabel();
        jFormattedTextFieldDataNascimentoAtualizada = new javax.swing.JFormattedTextField();
        jButtonCancelarAtualizacoes = new javax.swing.JButton();
        jLabelPreencherDadosAtuais = new javax.swing.JLabel();
        jLabelNomeAtualizado = new javax.swing.JLabel();
        jFormattedTextFieldPesoAtualizado = new javax.swing.JFormattedTextField();
        jFormattedTextFieldAlturaAtualizada = new javax.swing.JFormattedTextField();
        jLabelPesoAtualizado = new javax.swing.JLabel();
        jLabelDataNascimentoAtualizada = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonAtualizar = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);
        setSize(new java.awt.Dimension(200, 150));

        jLabelBuscarCliente.setText("Buscar Cliente :");

        botaoBuscar.setText("Buscar");
        botaoBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBuscarLayout = new javax.swing.GroupLayout(jPanelBuscar);
        jPanelBuscar.setLayout(jPanelBuscarLayout);
        jPanelBuscarLayout.setHorizontalGroup(
            jPanelBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBuscarLayout.createSequentialGroup()
                .addComponent(jLabelBuscarCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(caixaBuscarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoBuscar)
                .addContainerGap())
        );
        jPanelBuscarLayout.setVerticalGroup(
            jPanelBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoBuscar)
                    .addComponent(caixaBuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBuscarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cabecalho.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("RESUMO DOS CLIENTES");

        jButtonDeslogar.setText("Deslogar");
        jButtonDeslogar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeslogarActionPerformed(evt);
            }
        });

        jButtonVisaoGeral.setText("Visão Geral");
        jButtonVisaoGeral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisaoGeralActionPerformed(evt);
            }
        });

        botaoNovoCliente.setText("Novo Cliente");
        botaoNovoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovoClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cabecalhoLayout = new javax.swing.GroupLayout(cabecalho);
        cabecalho.setLayout(cabecalhoLayout);
        cabecalhoLayout.setHorizontalGroup(
            cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonVisaoGeral)
                .addGap(18, 18, 18)
                .addComponent(botaoNovoCliente)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeslogar)
                .addGap(18, 18, 18))
        );
        cabecalhoLayout.setVerticalGroup(
            cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jButtonDeslogar)
                    .addComponent(jButtonVisaoGeral)
                    .addComponent(botaoNovoCliente))
                .addContainerGap())
        );

        jPanelClienteEncontrado.setBorder(javax.swing.BorderFactory.createTitledBorder("Cliente encontrado: "));

        jTableClienteEncontrado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "CPF", "Nome", "Data Nascimento", "Altura", "Peso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClienteEncontrado.setRowHeight(25);
        jTableClienteEncontrado.setShowGrid(true);
        jTableClienteEncontrado.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTableClienteEncontrado);
        TableColumnModel tcm = jTableClienteEncontrado.getColumnModel();
        tcm.removeColumn(tcm.getColumn(0));

        jTableClienteEncontrado.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (jTableClienteEncontrado.getSelectedRow() > -1) {
                    jToggleButtonAtualizarDados.setEnabled(true);
                    jToggleButtonCalcularImc1.setEnabled(true);
                    jCheckBoxConfirmarDelete.setEnabled(true);
                    jToggleButtonCalcularImc1.setSelected(false);
                    jPanelImc1.setVisible(false);
                    jPanelAtualizarDados.setVisible(false);
                    jToggleButtonAtualizarDados.setSelected(false);
                    jCheckBoxConfirmarDelete.setSelected(false);
                    jButtonDeletarCadastro.setEnabled(false);

                    int total = jTableClienteEncontrado.getRowCount();
                    int selecionado = jTableClienteEncontrado.getSelectedRow() + 1;
                    String nome = jTableClienteEncontrado.getValueAt(jTableClienteEncontrado.getSelectedRow(), 1).toString();
                    jPanelClienteEncontrado.setBorder(BorderFactory.createTitledBorder("Registro " + selecionado + " de " + total + " selecionado: " + nome));
                }
            }
        });

        jPanelImc1.setBorder(javax.swing.BorderFactory.createTitledBorder("IMC"));

        jButtonBaixarInfo.setText("Baixar Informações");
        jButtonBaixarInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBaixarInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelImc1Layout = new javax.swing.GroupLayout(jPanelImc1);
        jPanelImc1.setLayout(jPanelImc1Layout);
        jPanelImc1Layout.setHorizontalGroup(
            jPanelImc1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImc1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImcInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBaixarInfo)
                .addContainerGap())
        );
        jPanelImc1Layout.setVerticalGroup(
            jPanelImc1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImc1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jButtonBaixarInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabelImcInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jToggleButtonAtualizarDados.setText("Atualizar Dados");
        jToggleButtonAtualizarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAtualizarDadosActionPerformed(evt);
            }
        });

        jButtonDeletarCadastro.setText("Confirmar");
        jButtonDeletarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletarCadastroActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Atualização feita com sucesso!");

        jToggleButtonCalcularImc1.setText("Calcular IMC");
        jToggleButtonCalcularImc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCalcularImc1ActionPerformed(evt);
            }
        });

        jCheckBoxConfirmarDelete.setText("Deletar Cadastro");
        jCheckBoxConfirmarDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxConfirmarDeleteActionPerformed(evt);
            }
        });

        jLabelCadastroDeletado.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelCadastroDeletado.setText("Cadastro deletado com sucesso!");

        jLabelAlturaAtualizada.setText("Altura:");

        try {
            jFormattedTextFieldDataNascimentoAtualizada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDataNascimentoAtualizada.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);

        jButtonCancelarAtualizacoes.setText("Cancelar");
        jButtonCancelarAtualizacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarAtualizacoesActionPerformed(evt);
            }
        });

        jLabelPreencherDadosAtuais.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelPreencherDadosAtuais.setText("Preencha todos os dados corretamente antes de salvar!");

        jLabelNomeAtualizado.setText("Nome:");

        jFormattedTextFieldPesoAtualizado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFormattedTextFieldPesoAtualizado.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);

        try {
            jFormattedTextFieldAlturaAtualizada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldAlturaAtualizada.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);

        jLabelPesoAtualizado.setText("Peso:");

        jLabelDataNascimentoAtualizada.setText("Data de Nascimento:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Insira os dados atualizados:");

        jButtonAtualizar.setText("Salvar");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAtualizarDadosLayout = new javax.swing.GroupLayout(jPanelAtualizarDados);
        jPanelAtualizarDados.setLayout(jPanelAtualizarDadosLayout);
        jPanelAtualizarDadosLayout.setHorizontalGroup(
            jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAtualizarDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPreencherDadosAtuais, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addGroup(jPanelAtualizarDadosLayout.createSequentialGroup()
                        .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAlturaAtualizada)
                            .addComponent(jLabelNomeAtualizado))
                        .addGap(33, 33, 33)
                        .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNomeAtualizado, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldAlturaAtualizada))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPesoAtualizado)
                            .addComponent(jLabelDataNascimentoAtualizada))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jFormattedTextFieldPesoAtualizado, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFormattedTextFieldDataNascimentoAtualizada, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addComponent(jButtonCancelarAtualizacoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAtualizarDadosLayout.setVerticalGroup(
            jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAtualizarDadosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeAtualizado)
                    .addComponent(jLabelDataNascimentoAtualizada)
                    .addComponent(jFormattedTextFieldDataNascimentoAtualizada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNomeAtualizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanelAtualizarDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAlturaAtualizada)
                    .addComponent(jLabelPesoAtualizado)
                    .addComponent(jFormattedTextFieldPesoAtualizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancelarAtualizacoes)
                    .addComponent(jFormattedTextFieldAlturaAtualizada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAtualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelPreencherDadosAtuais)
                .addGap(28, 28, 28))
        );

        try {
            mascaraDataNascimento = new MaskFormatter("##-##-####");
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }

        this.jFormattedTextFieldDataNascimentoAtualizada.setFormatterFactory(new DefaultFormatterFactory(mascaraDataNascimento));
        jLabelPreencherDadosAtuais.setVisible(false);
        try {
            mascaraAltura = new MaskFormatter("#.##");
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }

        this.jFormattedTextFieldAlturaAtualizada.setFormatterFactory(new DefaultFormatterFactory(mascaraAltura));

        javax.swing.GroupLayout jPanelClienteEncontradoLayout = new javax.swing.GroupLayout(jPanelClienteEncontrado);
        jPanelClienteEncontrado.setLayout(jPanelClienteEncontradoLayout);
        jPanelClienteEncontradoLayout.setHorizontalGroup(
            jPanelClienteEncontradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelImc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelClienteEncontradoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClienteEncontradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClienteEncontradoLayout.createSequentialGroup()
                        .addComponent(jToggleButtonCalcularImc1)
                        .addGap(5, 5, 5)
                        .addComponent(jToggleButtonAtualizarDados)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jLabelCadastroDeletado)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxConfirmarDelete)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDeletarCadastro))
                    .addComponent(jPanelAtualizarDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelClienteEncontradoLayout.setVerticalGroup(
            jPanelClienteEncontradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClienteEncontradoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClienteEncontradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCadastroDeletado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelClienteEncontradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jToggleButtonAtualizarDados)
                        .addComponent(jButtonDeletarCadastro)
                        .addComponent(jToggleButtonCalcularImc1)
                        .addComponent(jCheckBoxConfirmarDelete)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelAtualizarDados, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelImc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        jPanelImc1.setVisible(false);
        jToggleButtonAtualizarDados.setEnabled(false);
        jButtonDeletarCadastro.setEnabled(false);
        jLabel2.setVisible(false);
        jToggleButtonCalcularImc1.setEnabled(false);
        jCheckBoxConfirmarDelete.setEnabled(false);
        jLabelCadastroDeletado.setVisible(false);
        jPanelAtualizarDados.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanelBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(546, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelClienteEncontrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelClienteEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(950, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscarActionPerformed
        try {
            readTableClientePorNome(caixaBuscarCliente.getText());
            jToggleButtonAtualizarDados.setEnabled(false);
            jPanelAtualizarDados.setVisible(false);
            jToggleButtonCalcularImc1.setEnabled(false);
            jPanelImc1.setVisible(false);
            jCheckBoxConfirmarDelete.setEnabled(false);

        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_botaoBuscarActionPerformed

    private void jButtonDeslogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeslogarActionPerformed
        new TelaPrincipal().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonDeslogarActionPerformed

    private void jToggleButtonAtualizarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAtualizarDadosActionPerformed
        ClienteDAO clienteDao = new ClienteDAO();
        Cliente cliente = new Cliente();
        
        if (jToggleButtonAtualizarDados.isSelected()) {
            try {
                jPanelAtualizarDados.setVisible(true);
                int id = Integer.parseInt(jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 0).toString());
                cliente = clienteDao.getClientePorId(id);
                mascaraPeso();
                jTextFieldNomeAtualizado.setText(cliente.getNome());
                jFormattedTextFieldDataNascimentoAtualizada.setText(sdf.format(cliente.getDataNascimento()));
                jFormattedTextFieldAlturaAtualizada.setText(Double.toString(cliente.getAltura()));
                jFormattedTextFieldPesoAtualizado.setText(Double.toString(cliente.getPeso()));
            } catch (SQLException ex) {
                throw new RuntimeException(ex);
            }
        } else {
            jButtonCancelarAtualizacoesActionPerformed(evt);
        }
    }//GEN-LAST:event_jToggleButtonAtualizarDadosActionPerformed

    private void jToggleButtonCalcularImc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonCalcularImc1ActionPerformed
        int id = (Integer.parseInt(jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 0).toString()));
        Cliente cliente;
        try {
            cliente = new ClienteDAO().getClientePorId(id);
            if (jToggleButtonCalcularImc1.isSelected()) {
                jPanelImc1.setVisible(true);
                jLabelImcInfo.setText(cliente.pesoIdealAdulto(cliente));
            } else {
                jPanelImc1.setVisible(false);
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_jToggleButtonCalcularImc1ActionPerformed

    private void jButtonVisaoGeralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisaoGeralActionPerformed
        new TelaVisualizacao().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonVisaoGeralActionPerformed

    private void botaoNovoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovoClienteActionPerformed
        new TelaCadastro().setVisible(true);
        dispose();
    }//GEN-LAST:event_botaoNovoClienteActionPerformed

    private void jCheckBoxConfirmarDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxConfirmarDeleteActionPerformed
        if (jCheckBoxConfirmarDelete.isSelected()) {
            jButtonDeletarCadastro.setEnabled(true);
        } else {
            jButtonDeletarCadastro.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxConfirmarDeleteActionPerformed

    private void jButtonDeletarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletarCadastroActionPerformed
        ClienteDAO clienteDao = new ClienteDAO();
        int id = Integer.parseInt(jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 0).toString());
        try {
            clienteDao.deleteById(id);
            DefaultTableModel modelo = (DefaultTableModel) jTableClienteEncontrado.getModel();
            modelo.setNumRows(0);

            jLabelCadastroDeletado.setVisible(true);
            Timer timer = new Timer();
            TimerTask task = new TimerTask() {
                @Override
                public void run() {
                    jLabelCadastroDeletado.setVisible(false);
                    timer.cancel();
                }
            };
            timer.schedule(task, 3000L);

            jPanelClienteEncontrado.setBorder(BorderFactory.createTitledBorder("Nenhum registro selecionado."));
            caixaBuscarCliente.setText("");
            jToggleButtonAtualizarDados.setEnabled(false);
            jToggleButtonCalcularImc1.setEnabled(false);
            jCheckBoxConfirmarDelete.setEnabled(false);
            jButtonDeletarCadastro.setEnabled(false);
            jPanelAtualizarDados.setVisible(false);
            jPanelImc1.setVisible(false);

        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_jButtonDeletarCadastroActionPerformed

    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed
        Cliente c = new Cliente();
        ClienteDAO clienteDao = new ClienteDAO();
        boolean preenchidos = checarVazio();
        checarVazio();
        int id = (Integer.parseInt(jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 0).toString()));
        String cpf = jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 1).toString();

        c.setId(id);
        c.setCpf(cpf);
        c.setNome(jTextFieldNomeAtualizado.getText());
        try {
            c.setDataNascimento(sdf.parse(jFormattedTextFieldDataNascimentoAtualizada.getText()));
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }
        c.setAltura(Double.parseDouble(jFormattedTextFieldAlturaAtualizada.getText()));
        c.setPeso(Double.parseDouble(jFormattedTextFieldPesoAtualizado.getText()));

        if (preenchidos) {
            clienteDao.update(c);
            jButtonCancelarAtualizacoesActionPerformed(evt);
            try {
                readTableClientePorIdCadastro(id);
            } catch (SQLException ex) {
                throw new RuntimeException(ex);
            }
            jLabel2.setVisible(true);
            jToggleButtonAtualizarDados.setSelected(false);
            jToggleButtonCalcularImc1.setSelected(false);
            jPanelImc1.setVisible(false);
            Timer timer = new Timer();
            TimerTask task = new TimerTask() {
                @Override
                public void run() {
                    jLabel2.setVisible(false);
                    timer.cancel();
                }
            };

            timer.schedule(task, 3000L);
        }
    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    private void jButtonCancelarAtualizacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarAtualizacoesActionPerformed
        jTextFieldNomeAtualizado.setText("");
        jFormattedTextFieldDataNascimentoAtualizada.setText("");
        jFormattedTextFieldAlturaAtualizada.setText("");
        jFormattedTextFieldPesoAtualizado.setText("");
        jPanelAtualizarDados.setVisible(false);
        jToggleButtonAtualizarDados.setSelected(false);
    }//GEN-LAST:event_jButtonCancelarAtualizacoesActionPerformed

    private void jButtonBaixarInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBaixarInfoActionPerformed
        ClienteDAO clienteDao = new ClienteDAO();
        int id = (Integer.parseInt(jTableClienteEncontrado.getModel().getValueAt(jTableClienteEncontrado.getSelectedRow(), 0).toString()));
        try {
            clienteDao.baixarInformacoes(id);
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            jPanelImc1.setVisible(false);
            jToggleButtonCalcularImc1.setSelected(false);
        }
    }//GEN-LAST:event_jButtonBaixarInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoBuscar;
    private javax.swing.JButton botaoNovoCliente;
    private javax.swing.JPanel cabecalho;
    private javax.swing.JTextField caixaBuscarCliente;
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonBaixarInfo;
    private javax.swing.JButton jButtonCancelarAtualizacoes;
    private javax.swing.JButton jButtonDeletarCadastro;
    private javax.swing.JButton jButtonDeslogar;
    private javax.swing.JButton jButtonVisaoGeral;
    private javax.swing.JCheckBox jCheckBoxConfirmarDelete;
    private javax.swing.JFormattedTextField jFormattedTextFieldAlturaAtualizada;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataNascimentoAtualizada;
    private javax.swing.JFormattedTextField jFormattedTextFieldPesoAtualizado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelAlturaAtualizada;
    private javax.swing.JLabel jLabelBuscarCliente;
    private javax.swing.JLabel jLabelCadastroDeletado;
    private javax.swing.JLabel jLabelDataNascimentoAtualizada;
    private javax.swing.JLabel jLabelImcInfo;
    private javax.swing.JLabel jLabelNomeAtualizado;
    private javax.swing.JLabel jLabelPesoAtualizado;
    private javax.swing.JLabel jLabelPreencherDadosAtuais;
    private javax.swing.JPanel jPanelAtualizarDados;
    private javax.swing.JPanel jPanelBuscar;
    private javax.swing.JPanel jPanelClienteEncontrado;
    private javax.swing.JPanel jPanelImc1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTable jTableClienteEncontrado;
    private javax.swing.JTextField jTextFieldNomeAtualizado;
    private javax.swing.JToggleButton jToggleButtonAtualizarDados;
    private javax.swing.JToggleButton jToggleButtonCalcularImc1;
    // End of variables declaration//GEN-END:variables

    public void readTableCliente(TelaCadastroModelo model) {
        // Popula a tabela na TelaCliente com os dados do cliente selecionado na TelaVisualizacao
        DefaultTableModel modelo = (DefaultTableModel) jTableClienteEncontrado.getModel();
        modelo.setNumRows(0);
        modelo.addRow(new Object[]{
            model.getId(),
            model.getCpf(),
            model.getNome(),
            sdf.format(model.getDataNascimento()),
            model.getAltura(),
            model.getPeso()
        });
        String nome = model.getNome();
        jPanelClienteEncontrado.setBorder(BorderFactory.createTitledBorder("Registro Encontrado: " + nome));

    }

    public void readTableClientePorIdCadastro(int id) throws SQLException {
        // Popula a tabela na TelaCliente com o cliente atualizado, buscando no DB pelo ID
        DefaultTableModel modelo = (DefaultTableModel) jTableClienteEncontrado.getModel();
        modelo.setNumRows(0);
        ClienteDAO clienteDao = new ClienteDAO();

        try {
            Cliente cliente = clienteDao.getClientePorId(id);
            modelo.addRow(new Object[]{
                cliente.getId(),
                cliente.getCpf(),
                cliente.getNome(),
                sdf.format(cliente.getDataNascimento()),
                cliente.getAltura(),
                cliente.getPeso()
            });
            int quantidade = jTableClienteEncontrado.getRowCount();
            jPanelClienteEncontrado.setBorder(BorderFactory.createTitledBorder("Registro(s) Encontrado(s): " + quantidade));

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void readTableClientePorNome(String nome) throws SQLException {
        // Popula a tabela na TelaCliente com os clientes encontrados no DB cujos nomes correspondem aos caracteres buscados
        DefaultTableModel modelo = (DefaultTableModel) jTableClienteEncontrado.getModel();
        modelo.setNumRows(0);
        TableRowSorter<TableModel> sorter;
        sorter = new TableRowSorter<>(modelo);
        jTableClienteEncontrado.setRowSorter(sorter);
        ClienteDAO clienteDao = new ClienteDAO();

        try {
            for (Cliente cliente : clienteDao.getClientePorNome(nome)) {
                modelo.addRow(new Object[]{
                    cliente.getId(),
                    cliente.getCpf(),
                    cliente.getNome(),
                    sdf.format(cliente.getDataNascimento()),
                    cliente.getAltura(),
                    cliente.getPeso()
                });
            }
            int quantidade = jTableClienteEncontrado.getRowCount();
            jPanelClienteEncontrado.setBorder(BorderFactory.createTitledBorder("Registro(s) Encontrado(s): " + quantidade));

        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    private boolean checarVazio() {
        boolean vazio = false;

        // Verifica se algum dos campos da JTable de cadastro está vazio ou com tamanho menor que o determinado
        if (jTextFieldNomeAtualizado.getText().trim().isEmpty()) {
            jTextFieldNomeAtualizado.requestFocus();
            vazio = true;
        }
        if (jFormattedTextFieldDataNascimentoAtualizada.getText().trim().length() < 10) {
            jFormattedTextFieldDataNascimentoAtualizada.requestFocus();
            System.out.println("data" + jFormattedTextFieldDataNascimentoAtualizada.getText().length());
            vazio = true;
        }
        if (jFormattedTextFieldAlturaAtualizada.getText().trim().length() < 4) {
            jFormattedTextFieldAlturaAtualizada.requestFocus();
            vazio = true;
        }
        if (jFormattedTextFieldPesoAtualizado.getText().trim().length() < 5) {
            jFormattedTextFieldPesoAtualizado.requestFocus();
            System.out.println("peso" + jFormattedTextFieldPesoAtualizado.getText().trim().length());
            vazio = true;
        }

        // Caso algum campo esteja vazio não prosegue com a função de cadastro
        if (vazio) {
            jLabelPreencherDadosAtuais.setVisible(true);
            Timer timer = new Timer();
            TimerTask task = new TimerTask() {
                @Override
                public void run() {
                    jLabelPreencherDadosAtuais.setVisible(false);
                    timer.cancel();
                }
            };
            timer.schedule(task, 3000L);
            return false;
        }
        return true;
    }

    public void mascaraPeso() {
        // Mascara que determina a formatação do dado inserido
        jFormattedTextFieldPesoAtualizado.setFormatterFactory(new AbstractFormatterFactory() {

            @Override
            public AbstractFormatter getFormatter(JFormattedTextField tf) {
                DecimalFormat format = new DecimalFormat();
                format.setMinimumFractionDigits(2);
                format.setMaximumFractionDigits(2);
                format.setRoundingMode(RoundingMode.HALF_UP);

                DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols(getLocale());
                otherSymbols.setDecimalSeparator('.');

                format.setDecimalFormatSymbols(otherSymbols);
                NumberFormatter formatter = new NumberFormatter(format);
                formatter.setAllowsInvalid(false);
                formatter.setMinimum(0.00);
                formatter.setMaximum(999.99);
                return formatter;
            }

        });

    }
}
